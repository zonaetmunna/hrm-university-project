generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String              @unique
  password           String
  role               String              @default("employee")
  position           String?
  departmentId       String?
  avatar             String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  announcements      Announcement[]
  attendances        Attendance[]
  documents          Document[]
  givenFeedbacks     Feedback[]          @relation("GivenFeedback")
  receivedFeedbacks  Feedback[]          @relation("ReceivedFeedback")
  goals              Goal[]
  leaves             Leave[]
  payslips           Payslip[]
  performanceMetrics PerformanceMetric[]
  assignedTickets    SupportTicket[]     @relation("AssignedTickets")
  supportTickets     SupportTicket[]     @relation("CreatedTickets")
  ticketMessages     TicketMessage[]
  department         Department?         @relation(fields: [departmentId], references: [id])
}

model Department {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
}

model Leave {
  id        String   @id @default(cuid())
  userId    String
  type      String
  startDate DateTime
  endDate   DateTime
  status    String   @default("pending")
  reason    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Attendance {
  id        String    @id @default(cuid())
  userId    String
  date      DateTime
  checkIn   DateTime?
  checkOut  DateTime?
  status    String    @default("present")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
}

model Document {
  id           String   @id @default(cuid())
  name         String
  category     String
  uploadedBy   String
  dateUploaded DateTime
  size         String
  url          String
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model Payslip {
  id          String   @id @default(cuid())
  userId      String
  month       Int
  year        Int
  basicSalary Float
  allowances  Float
  deductions  Float
  netSalary   Float
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model Goal {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String
  category    String
  target      String?
  progress    Int      @default(0)
  status      String   @default("In Progress")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model Feedback {
  id         String    @id @default(cuid())
  title      String?
  content    String
  type       String
  status     String    @default("Draft")
  giverId    String
  receiverId String
  dueDate    DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  giver      User      @relation("GivenFeedback", fields: [giverId], references: [id])
  receiver   User      @relation("ReceivedFeedback", fields: [receiverId], references: [id])
}

model Announcement {
  id          String   @id @default(cuid())
  title       String
  content     String
  date        DateTime @default(now())
  author      String
  category    String
  isImportant Boolean  @default(false)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model SupportTicket {
  id          String          @id @default(cuid())
  title       String
  description String
  department  String
  status      String          @default("Pending")
  priority    String          @default("Normal")
  creatorId   String
  assignedId  String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  assignedTo  User?           @relation("AssignedTickets", fields: [assignedId], references: [id])
  creator     User            @relation("CreatedTickets", fields: [creatorId], references: [id])
  messages    TicketMessage[]
}

model TicketMessage {
  id        String        @id @default(cuid())
  content   String
  userId    String
  ticketId  String
  createdAt DateTime      @default(now())
  ticket    SupportTicket @relation(fields: [ticketId], references: [id])
  user      User          @relation(fields: [userId], references: [id])
}

model PerformanceMetric {
  id             String   @id @default(cuid())
  userId         String
  productivity   Int
  taskCompletion Int
  qualityScore   Int
  attendance     Int
  status         String   @default("Good")
  period         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String
  status      String    @default("On Track")
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
